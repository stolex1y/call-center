name: Test debug

on:
  workflow_dispatch:
  pull_request:
    branches:
      - '*'

env:
  BUILD_DIR: "cmake-build-debug"

jobs:
  vars:
    runs-on: ubuntu-latest
    outputs:
      build_dir: ${{ env.BUILD_DIR }}
    steps:
      - run: echo "Exposing env vars"

  build-debug:
    uses: stolex1y/call-center/.github/workflows/build.yml@master
    needs: vars
    with:
      build_type: "Debug"
      build_dir: ${{ needs.vars.outputs.build_dir }}

  test-debug:
    runs-on: ubuntu-latest
    needs: [ vars, build-debug ]
    steps:
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.vars.outputs.build_dir }}
          path: .

      - name: Extract build archive
        run: |
          tar -xzf "$BUILD_DIR.tar.gz"
          sudo chmod -R 755 $BUILD_DIR

      - name: Restore boost cache
        uses: actions/cache@v3
        id: cache-boost
        with:
          path: "~/boost"
          key: ${{ runner.os }}-build-boost

      - name: Install boost
        env:
          CACHE_HIT: ${{ steps.cache-boost.outputs.cache-hit }}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --force --recursive ~/boost/lib/* /usr/lib
            sudo cp --force --recursive ~/boost/include/* /usr/include/boost
          else
            echo "Didn't find boost cache"
            exit 1
          fi

      - name: Test
        run: |
          cd $BUILD_DIR
          ctest --timeout 10 --output-on-failure --schedule-random -j 2

      - name: Upload build logs if failed
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Test debug build
          path: ${{ needs.vars.outputs.build_dir }}/test

  valgrind:
    runs-on: ubuntu-latest
    needs: [ vars, build-debug ]
    steps:
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.vars.outputs.build_dir }}
          path: .

      - name: Extract build archive
        run: |
          tar -xzf "$BUILD_DIR.tar.gz"
          sudo chmod -R 755 $BUILD_DIR

      - name: Restore boost cache
        uses: actions/cache@v3
        id: cache-boost
        with:
          path: "~/boost"
          key: ${{ runner.os }}-build-boost

      - name: Install boost
        env:
          CACHE_HIT: ${{ steps.cache-boost.outputs.cache-hit }}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --force --recursive ~/boost/lib/* /usr/lib
            sudo cp --force --recursive ~/boost/include/* /usr/include/boost
          else
            echo "Didn't find boost cache"
            exit 1
          fi

      - name: Valgrind
        run: |
          cd $BUILD_DIR
          cmake --build . -t memcheck-call-center-test -j 2

      - name: Upload valgrind report if failed
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Valgrind report
          path: ${{ needs.vars.outputs.build_dir }}/valgrind-*
